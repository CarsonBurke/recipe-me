//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "User")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: String,
    pub email: String,
    pub password: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_one = "super::login_token::Entity")]
    LoginToken,
    #[sea_orm(has_many = "super::recipe::Entity")]
    Recipe,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::login_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoginToken.def()
    }
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        super::comment::Relation::Recipe.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::comment::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
