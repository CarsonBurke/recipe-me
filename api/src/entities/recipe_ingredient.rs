//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "RecipeIngredient")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub recipe_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub ingredient_id: i32,
    pub ingredient_count: Option<i32>,
    pub amount: Option<i32>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ingredient_name::Entity",
        from = "Column::IngredientId",
        to = "super::ingredient_name::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    IngredientName,
    #[sea_orm(
        belongs_to = "super::recipe::Entity",
        from = "Column::RecipeId",
        to = "super::recipe::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Recipe,
}

impl Related<super::ingredient_name::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IngredientName.def()
    }
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipe.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
