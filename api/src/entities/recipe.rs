//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recipe")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub instructions: String,
    pub ingredients: Option<Vec<String>>,
    pub views: i32,
    pub ratings: i32,
    pub total_rating: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::recipecousine::Entity")]
    Recipecousine,
    #[sea_orm(has_many = "super::recipeingredient::Entity")]
    Recipeingredient,
    #[sea_orm(has_many = "super::recipetype::Entity")]
    Recipetype,
}

impl Related<super::recipecousine::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipecousine.def()
    }
}

impl Related<super::recipeingredient::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipeingredient.def()
    }
}

impl Related<super::recipetype::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipetype.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
